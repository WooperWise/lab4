#pragma once

#include <iostream>

using namespace std;

class Print 
{
public:
    void Hello () {
        cout<<"◣◥◣◥◤◢◤◢◣◥◣◥◤◢◣◥◣◥◤◢◤◢◣◥ \n" 
            <<"   Welcome to Lab №4   \n"
            <<"◣◥◣◥◤◢◤◥◣◥◤◢◤◢◣◥◣◥◤◢◤◢◣◥ \n";
    };

    void Info () {
        cout<<"\n"
            <<"╔══════════════════════════════╗ \n"
            <<"║   Enter i for information.   ║ \n"
            <<"╚══════════════════════════════╝ \n"
            <<"Enter: ";
    };

    void Choose () {
        cout<<"\n"
            <<"╔══════════════════════════════════╗ \n"
            <<"║    1   ==>   Integer.            ║ \n"
            <<"║ ──────────────────────────────── ║ \n"
            <<"║    2   ==>   Double.             ║ \n"
            <<"║ ──────────────────────────────── ║ \n"
            <<"║    3   ==>   Complex (int).      ║ \n"
            <<"║ ──────────────────────────────── ║ \n"
            <<"║    4   ==>   Complex (double).   ║ \n"
            <<"║ ──────────────────────────────── ║ \n"
            <<"║    5   ==>   String.             ║ \n"
            <<"║ ──────────────────────────────── ║ \n"
            <<"║    6   ==>   Person.             ║ \n"
            <<"║ ──────────────────────────────── ║ \n"
            <<"║    E   ==>   Exit.               ║ \n"
            <<"╚══════════════════════════════════╝ \n"
            <<"Enter: ";
    };

    void Menue () {
        cout<<"\n"
            <<"╔═════════════════════════════════════════════════╗ \n"
            <<"║    0   ==>   Random of tree.                    ║ \n"
            <<"║ ─────────────────────────────────────────────── ║ \n"
            <<"║    1   ==>   Insert an element into the tree.   ║ \n"
            <<"║ ─────────────────────────────────────────────── ║ \n"
            <<"║    2   ==>   Find an element in the tree.       ║ \n"
            <<"║ ─────────────────────────────────────────────── ║ \n"
            <<"║    3   ==>   Delete tree.                       ║\n"
            <<"║ ─────────────────────────────────────────────── ║ \n"
            <<"║    4   ==>   Print in selected order.           ║ \n"
            <<"║ ─────────────────────────────────────────────── ║ \n"
            <<"║    5   ==>   Read from keyboard.                ║ \n"
            <<"║ ─────────────────────────────────────────────── ║ \n"
            <<"║    6   ==>   Print subtree                      ║ \n"
            <<"║ ─────────────────────────────────────────────── ║ \n"
            <<"║    7   ==>   Merge two trees.                   ║ \n"
            <<"║ ─────────────────────────────────────────────── ║ \n"
            <<"║    8   ==>   Map for tree.                      ║ \n"
            <<"║ ─────────────────────────────────────────────── ║ \n"
            <<"║    9   ==>   Where for tree.                    ║ \n"
            <<"║ ─────────────────────────────────────────────── ║ \n"
            <<"║    B   ==>   Back to selection.                 ║ \n"
            <<"╚═════════════════════════════════════════════════╝ \n";
    };

    void MenuePerson () {
        cout<<"\n"
            <<"╔═════════════════════════════════════════════════╗ \n"
            <<"║    0   ==>   Random of tree.                    ║ \n"
            <<"║ ─────────────────────────────────────────────── ║ \n"
            <<"║    1   ==>   Insert an element into the tree.   ║ \n"
            <<"║ ─────────────────────────────────────────────── ║ \n"
            <<"║    2   ==>   Find an element in the tree.       ║ \n"
            <<"║ ─────────────────────────────────────────────── ║ \n"
            <<"║    3   ==>   Delete tree.                       ║\n"
            <<"║ ─────────────────────────────────────────────── ║ \n"
            <<"║    4   ==>   Print in selected order.           ║ \n"
            <<"║ ─────────────────────────────────────────────── ║ \n"
            <<"║    5   ==>   Read from keyboard.                ║ \n"
            <<"║ ─────────────────────────────────────────────── ║ \n"
            <<"║    6   ==>   Print subtree                      ║ \n"
            <<"║ ─────────────────────────────────────────────── ║ \n"
            <<"║    7   ==>   Merge two trees.                   ║ \n"
            <<"║ ─────────────────────────────────────────────── ║ \n"
            <<"║    8   ==>   Map for tree.                      ║ \n"
            <<"║ ─────────────────────────────────────────────── ║ \n"
            <<"║    B   ==>   Back to selection.                 ║ \n"
            <<"╚═════════════════════════════════════════════════╝ \n";
    };

    void MenueComplex () {
        cout<<"\n"
            <<"╔═════════════════════════════════════════════════╗ \n"
            <<"║    0   ==>   Random of tree.                    ║ \n"
            <<"║ ─────────────────────────────────────────────── ║ \n"
            <<"║    1   ==>   Insert an element into the tree.   ║ \n"
            <<"║ ─────────────────────────────────────────────── ║ \n"
            <<"║    2   ==>   Find an element in the tree.       ║ \n"
            <<"║ ─────────────────────────────────────────────── ║ \n"
            <<"║    3   ==>   Delete tree.                       ║\n"
            <<"║ ─────────────────────────────────────────────── ║ \n"
            <<"║    4   ==>   Print in selected order.           ║ \n"
            <<"║ ─────────────────────────────────────────────── ║ \n"
            <<"║    5   ==>   Read from keyboard.                ║ \n"
            <<"║ ─────────────────────────────────────────────── ║ \n"
            <<"║    6   ==>   Print subtree                      ║ \n"
            <<"║ ─────────────────────────────────────────────── ║ \n"
            <<"║    7   ==>   Merge two trees.                   ║ \n"
            <<"║ ─────────────────────────────────────────────── ║ \n"
            <<"║    B   ==>   Back to selection.                 ║ \n"
            <<"╚═════════════════════════════════════════════════╝ \n";
    };

    void MapNum () {
        cout<<"\n"
            <<"╔══════════════════════════════════════╗ \n"
            <<"║    1   ==>   Add 10.                 ║ \n"
            <<"║ ──────────────────────────────────── ║ \n"
            <<"║    2   ==>   Multiply by 10.         ║ \n"
            <<"║ ──────────────────────────────────── ║ \n"
            <<"║    3   ==>   Squaring.               ║ \n"
            <<"║ ──────────────────────────────────── ║ \n"
            <<"║    4   ==>   Take the square root.   ║ \n"
            <<"╚══════════════════════════════════════╝ \n"
            <<"Enter: ";
    };

    void MapPerson () {
        cout<<"\n"
            <<"╔══════════════════════════════════╗ \n"
            <<"║    1   ==>   Name - Piter.       ║ \n"
            <<"║ ──────────────────────────────── ║ \n"
            <<"║    2   ==>   Surname - Parker.   ║ \n"
            <<"║ ──────────────────────────────── ║ \n"
            <<"║    3   ==>   Age - 69.           ║ \n"
            <<"╚══════════════════════════════════╝ \n"
            <<"Enter: ";
    };

    void WhereNum () {
        cout<<"\n"
            <<"╔════════════════════════════════╗ \n"
            <<"║    1   ==>   Even items.       ║ \n"
            <<"║ ────────────────────────────── ║ \n"
            <<"║    2   ==>   Odd items.        ║ \n"
            <<"║ ────────────────────────────── ║ \n"
            <<"║    3   ==>   Вivisible by 5.   ║ \n"
            <<"║ ────────────────────────────── ║ \n"
            <<"║    4   ==>   Вivisible by 3.   ║ \n"
            <<"╚════════════════════════════════╝ \n"
            <<"Enter: ";
    };

    void MapString () {
        cout<<"\n"
            <<"╔═══════════════════════════════╗ \n"
            <<"║    1   ==>   Sum 'Hello'.     ║ \n"
            <<"║ ───────────────────────────── ║ \n"
            <<"║    2   ==>   Get tree char.   ║ \n"
            <<"╚═══════════════════════════════╝ \n"
            <<"Enter: ";
    };

    void WhereString () {
        cout<<"\n"
            <<"╔══════════════════════════════╗ \n"
            <<"║    1   ==>   Find 'a'.       ║ \n"
            <<"║ ──────────────────────────── ║ \n"
            <<"║    2   ==>   Find 'abc'.     ║ \n"
            <<"╚══════════════════════════════╝ \n"
            <<"Enter: ";
    };

    void Order () {
        cout<<"\n"
            <<"╔═══════════════╗        \n"
            <<"║   Ro - Root   ║        \n"
            <<"║   L - Left    ║        \n"
            <<"║   R - Right   ║        \n"
            <<"╚═══════════════╝        \n"
            <<"                         \n"
            <<"╔══════════════════════╗ \n"
            <<"║    1   ==>   RoLR.   ║ \n"
            <<"║ ──────────────────── ║ \n"
            <<"║    2   ==>   RoRL.   ║ \n"
            <<"║ ──────────────────── ║ \n"
            <<"║    3   ==>   LRRo.   ║ \n"
            <<"║ ──────────────────── ║ \n"
            <<"║    4   ==>   LRoR.   ║ \n"
            <<"║ ──────────────────── ║ \n"
            <<"║    5   ==>   RLRo.   ║ \n"
            <<"║ ──────────────────── ║ \n"
            <<"║    6   ==>   RRoL.   ║ \n"
            <<"╚══════════════════════╝ \n"
            <<"Enter: ";
    };

    void Enter () {
        cout<<"\n"
            <<"╔═════════════════════════════════╗ \n"
            <<"║   Enter values for vector?(Y/N) ║ \n"
            <<"╚═════════════════════════════════╝ \n"
            <<"Enter: ";
    }

     void Person () {
        cout<<"\n"
            <<"╔═══════════════════╗ \n"
            <<"║   Enter Person.   ║ \n"
            <<"╚═══════════════════╝ \n"
            <<"Enter: ";
    }

    void Good () {
        cout<<"\n"
            <<"╔═══════════════════╗ \n"
            <<"║   Successfully.   ║ \n"
            <<"╚═══════════════════╝ \n";
    }

    void NotFind () {
        cout<<"\n"
            <<"╔════════════════════╗ \n"
            <<"║   Not find item.   ║ \n"
            <<"╚════════════════════╝ \n";
    }

    void CmplxNmbr () {
        cout<<"\n"
            <<"╔═══════════════════════════════╗ \n"
            <<"║   Enter the complex number.   ║ \n"
            <<"╚═══════════════════════════════╝ \n"
            <<"Enter: ";
    }

    void Count () {
        cout<<"\n"
            <<"╔═════════════════════════╗ \n"
            <<"║   Enter count for tree. ║ \n"
            <<"╚═════════════════════════╝ \n"
            <<"Enter: ";
    }
    
    void Items () {
        cout<<"\n"
            <<"╔═════════════════════════╗ \n"
            <<"║   Enter items for tree. ║ \n"
            <<"╚═════════════════════════╝ \n"
            <<"Enter: ";
    }
    
    void Item () {
        cout<<"\n"
            <<"╔════════════════════════╗ \n"
            <<"║   Enter item for tree. ║ \n"
            <<"╚════════════════════════╝ \n"
            <<"Enter: ";
    } 

    void Find () {
        cout<<"\n"
            <<"╔════════════════════════════════╗ \n"
            <<"║   Enter to find item for tree. ║ \n"
            <<"╚════════════════════════════════╝ \n"
            <<"Enter: ";
    } 

    void NewTree () {
        cout<<"\n"
            <<"╔═══════════════╗ \n"
            <<"║   New Tree.   ║ \n"
            <<"╚═══════════════╝ \n";
    }
};